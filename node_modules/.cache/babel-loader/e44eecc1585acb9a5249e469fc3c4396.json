{"ast":null,"code":"var _jsxFileName = \"/Users/hettychin/Desktop/UCBerkExtBootcamp2019/HW14/clicky-game/src/App.js\";\nimport React, { Component } from 'react';\nimport Navbar from './components/navbar';\nimport Header from './components/header';\nimport Wrapper from './components/wrapper';\nimport Card from './components/card';\nimport Footer from './components/footer';\nimport characters from './characters.json';\nimport './App.css';\nimport './styles/main.css';\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      count: 0,\n      topscore: 0,\n      msg: '',\n      clickedCharacters: [] // create an array to shuffle cards from https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\n\n    };\n\n    this.shuffle = array => {\n      var currentIndex = array.length,\n          temporaryValue,\n          randomIndex; // While there remain elements to shuffle...\n\n      while (0 !== currentIndex) {\n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1; // And swap it with the current element.\n\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n      }\n\n      return array;\n    };\n\n    this.characterClicked = id => {\n      // shuffle cards\n      this.setState({\n        characters: this.shuffle(characters)\n      });\n\n      if (this.state.clickedCharacters.includes(id)) {\n        this.setState({\n          // reset everything\n          count: 0,\n          msg: \"Sorry! You already clicked that image. Please start over.\",\n          clickedCharacters: []\n        });\n      } else {\n        this.setState({\n          // increases this.state by 1\n          count: this.state.count + 1,\n          msg: \"Nice! Keep going, but remember to only click each image ONE time.\"\n        });\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(Navbar, {\n      count: this.state.count,\n      msg: this.state.msg,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }), React.createElement(Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }), React.createElement(Wrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(\"main\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, characters.map(character => React.createElement(Card, {\n      id: character.id,\n      image: character.image,\n      name: character.name,\n      characterClicked: this.characterClicked,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    })))), React.createElement(Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/hettychin/Desktop/UCBerkExtBootcamp2019/HW14/clicky-game/src/App.js"],"names":["React","Component","Navbar","Header","Wrapper","Card","Footer","characters","App","state","count","topscore","msg","clickedCharacters","shuffle","array","currentIndex","length","temporaryValue","randomIndex","Math","floor","random","characterClicked","id","setState","includes","render","map","character","image","name"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport Navbar from './components/navbar'\nimport Header from './components/header'\nimport Wrapper from './components/wrapper'\nimport Card from './components/card'\nimport Footer from './components/footer'\nimport characters from './characters.json'\nimport './App.css'\nimport './styles/main.css'\n\nclass App extends Component {\n  // setting the state\n  state = {\n    count: 0,\n    topscore: 0,\n    msg: '',\n    clickedCharacters: []\n  }\n  // create an array to shuffle cards from https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\n  shuffle = (array) => {\n    var currentIndex = array.length, temporaryValue, randomIndex;\n  \n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n  \n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n  \n      // And swap it with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n  \n    return array;\n  }\n\n  characterClicked = (id) => {\n    // shuffle cards\n    this.setState(\n      {\n        characters: this.shuffle(characters)\n      }\n    )\n\n      if (this.state.clickedCharacters.includes(id)) {\n        this.setState({\n          // reset everything\n          count: 0,\n          msg: `Sorry! You already clicked that image. Please start over.`,\n          clickedCharacters: []\n        })\n      } else {\n        this.setState({\n          // increases this.state by 1\n          count: this.state.count + 1,\n          msg: `Nice! Keep going, but remember to only click each image ONE time.`\n        })\n\n      }\n  }\n\n  render () {\n    return (\n      <div>\n        <Navbar \n          count={this.state.count}\n          msg={this.state.msg}\n        />\n        <Header />\n        <Wrapper>\n          <main className='container'>\n            {characters.map(character => (\n              <Card\n                id={character.id}\n                image={character.image}\n                name={character.name}characterClicked={this.characterClicked}/>\n            ))}\n          </main>\n        </Wrapper>\n          \n        <Footer />\n      </div>\n    )\n  }\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}